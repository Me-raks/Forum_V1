from django.contrib.auth.models import User
from rest_framework import serializers
from django.shortcuts import get_object_or_404
from django.core.paginator import Paginator
from django.db.models import Max
from .models import *
from django.contrib import auth

class UserSerializer(serializers.HyperlinkedModelSerializer):
    class Meta:
        model = User
        fields = ['id','username', 'email']
        extra_kwargs = {
            'username': {'validators': []}
        }

class AdminSerializer(serializers.HyperlinkedModelSerializer):
    user=UserSerializer(many=False, read_only=True)
    class Meta:
        model = Admin
        fields = ['user']

class MessageSerializer(serializers.HyperlinkedModelSerializer):
    class Meta:
        model = Message
        fields = ['sender','recipient']
    def create(self, validated_data):

        user = validated_data.pop('user')
        sender = validated_data.get('sender')
        to_user_username = validated_data.get('recipient')
        body = validated_data.get('body')
        to_user = get_object_or_404(Membre, user=to_user_username)
        Message.send_message(sender, to_user, body)
        messages=Message.objects.create(user=user,**validated_data)
        return messages
class MembreSerializer(serializers.HyperlinkedModelSerializer):
    user=UserSerializer()
    class Meta:
        model = Membre
        fields = ['_id','user','telephone', 'niveau','nom_organisation']

        extra_kwargs = {
            'telephone': {'validators': []}
        }
    def create(self, validated_data):

        user = validated_data.pop('user')
        telephone=validated_data.get('telephone')
        username=validated_data.get('username')
        if Membre.objects.filter(telephone=telephone).exists():
            raise serializers.ValidationError('Ce membre existe déja')
            return telephone
        if User.objects.filter(username=username).exists():
            raise serializers.ValidationError('Ce compte existe déja')
            return user

        user=User.objects.create(**user)
        membre=Membre.objects.create(user=user,**validated_data)
        return membre
    def update(self, instance, validated_data):

        user_data = validated_data.pop('user')
        user = instance.user         
        instance.telephone = validated_data.get('telephone', instance.telephone)
        instance.save()
        user.identifiant = user_data.get('username', user.username)
        user.email = user_data.get('email', user.email)
        user.password = user_data.get('password', user.password)
        user.save()
        
        return instancess
class CategorieSerializer(serializers.HyperlinkedModelSerializer):
    class Meta:
        model = Categorie
        fields ='__all__'
    def create(self, validated_data):
        user = validated_data.pop('user')
        telephone=validated_data.get('titre')
        admin=Admin.objects.all()
        if Categorie.objects.filter(titre=titre).exists():
            raise serializers.ValidationError('Cette Categorie existe déja')
            return titre
        categorie=Categorie.objects.create(titre=titre,admin=admin)
        return categorie
class TagSerializer(serializers.HyperlinkedModelSerializer):
    class Meta:
        model = Tag
        fields = "__all__"

class DiscussionSerializer(serializers.HyperlinkedModelSerializer):
    class Meta:
        model = Discussion
        fields = "__all__"

class PostSerializer(serializers.HyperlinkedModelSerializer):
    class Meta:
        model = Post
        fields = "__all__"

class QuestionSerializer(serializers.HyperlinkedModelSerializer):
    class Meta:
        model = Question
        fields = "__all__"

class ReponseSerializer(serializers.HyperlinkedModelSerializer):
    class Meta:
        model = Reponse
        fields = "__all__"

class NotificationSerializer(serializers.HyperlinkedModelSerializer):
    class Meta:
        model = Notification
        fields = "__all__"

class PostSerializerone(serializers.HyperlinkedModelSerializer):
    class Meta:
        model = Post
        fields = ['likes_count','user']
class LikesSerializer(serializers.HyperlinkedModelSerializer):
    #post=PostSerializerone()
    class Meta:
        model = Likes
        fields = ['posts','user']
   
class DislikesSerializer(serializers.HyperlinkedModelSerializer):
    class Meta:
        model = Dislikes
        fields = ['posts','user']
   

    def update(self,validated_data):
        user_data = validated_data.pop('user')
        post=validated_data.get('id')
        return post

